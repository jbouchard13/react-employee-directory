{"ast":null,"code":"import _classCallCheck from \"F:\\\\apps\\\\react-employee-directory\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"F:\\\\apps\\\\react-employee-directory\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"F:\\\\apps\\\\react-employee-directory\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"F:\\\\apps\\\\react-employee-directory\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"F:\\\\apps\\\\react-employee-directory\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"F:\\\\apps\\\\react-employee-directory\\\\client\\\\src\\\\components\\\\pages\\\\Table\\\\index.js\";\nimport React from \"react\";\nimport TableBody from \"../../TableBody\";\nimport API from \"../../../utils/API\";\nimport Button from \"../../Button\";\nimport \"./style.css\";\n\nvar Table = /*#__PURE__*/function (_React$Component) {\n  _inherits(Table, _React$Component);\n\n  function Table() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Table);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Table)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      employees: [],\n      sortedEmployees: [],\n      sortOrder: \"ascending\"\n    };\n    return _this;\n  }\n\n  _createClass(Table, [{\n    key: \"getEmployeeData\",\n    // get employee data from backend db\n    value: function getEmployeeData() {\n      var _this2 = this;\n\n      API.getEmployeeInfo().then(function (res) {\n        _this2.setState({\n          employees: res.data\n        });\n\n        console.log(_this2.state.employees);\n      });\n    } // retrieve employee data when component mounts\n\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getEmployeeData();\n    }\n  }, {\n    key: \"sortByFirstName\",\n    value: function sortByFirstName() {\n      // sort in ascending or descending order depending on the setOrder state\n      if (this.state.sortOrder === \"ascending\") {\n        // uses array.sort method to compare state object properties\n        var ascendingFirstNameSorted = this.state.employees.sort(function (a, b) {\n          return a.firstName > b.firstName ? 1 : -1;\n        }); // set the state to the new first name sorted array\n\n        this.setState({\n          employees: ascendingFirstNameSorted,\n          sortOrder: \"descending\"\n        });\n      } else if (this.state.sortOrder === \"descending\") {\n        // uses array.sort method to compare state object properties\n        var descendingFirstNameSorted = this.state.employees.sort(function (a, b) {\n          return a.firstName < b.firstName ? 1 : -1;\n        });\n        this.setState({\n          employees: descendingFirstNameSorted,\n          sortOrder: \"ascending\"\n        });\n      }\n    }\n  }, {\n    key: \"sortByLastName\",\n    value: function sortByLastName() {\n      if (this.state.sortOrder === \"ascending\") {\n        var ascendingLastNameSorted = this.state.employees.sort(function (a, b) {\n          return a.lastName > b.lastName ? 1 : -1;\n        });\n        this.setState({\n          employees: ascendingLastNameSorted,\n          sortOrder: \"descending\"\n        });\n      } else if (this.state.sortOrder === \"descending\") {\n        var descendingLastNameSorted = this.state.employees.sort(function (a, b) {\n          return a.lastName < b.lastName ? 1 : -1;\n        });\n        this.setState({\n          employees: descendingLastNameSorted,\n          sortOrder: \"ascending\"\n        });\n      }\n    }\n  }, {\n    key: \"sortByJob\",\n    value: function sortByJob() {\n      if (this.state.sortOrder === \"ascending\") {\n        var ascendingJobTitleSorted = this.state.employees.sort(function (a, b) {\n          return a.jobTitle > b.jobTitle ? 1 : -1;\n        });\n        this.setState({\n          employees: ascendingJobTitleSorted,\n          sortOrder: \"descending\"\n        });\n      } else if (this.state.sortOrder === \"descending\") {\n        var descendingJobTitleSorted = this.state.employees.sort(function (a, b) {\n          return a.jobTitle < b.jobTitle ? 1 : -1;\n        });\n        this.setState({\n          employees: descendingJobTitleSorted,\n          sortOrder: \"ascending\"\n        });\n      }\n    }\n  }, {\n    key: \"deleteEmployee\",\n    value: function deleteEmployee(employeeId) {\n      var _this3 = this;\n\n      API.deleteEmployee(employeeId).then(function () {\n        _this3.getEmployeeData();\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"h3\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 9\n        }\n      }, \"Employees\"), /*#__PURE__*/React.createElement(Button, {\n        buttonText: \"Sort\",\n        handleSort: function handleSort() {\n          _this4.sortByFirstName();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(Button, {\n        buttonText: \"Sort\",\n        handleSort: function handleSort() {\n          _this4.sortByLastName();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(Button, {\n        buttonText: \"Sort\",\n        handleSort: function handleSort() {\n          _this4.sortByJob();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"table\", {\n        className: \"table table-dark table-striped table-bordered employees\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"thead\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"th\", {\n        scope: \"col\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 15\n        }\n      }, \"First Name\"), /*#__PURE__*/React.createElement(\"th\", {\n        scope: \"col\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 15\n        }\n      }, \"Last Name\"), /*#__PURE__*/React.createElement(\"th\", {\n        scope: \"col\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 15\n        }\n      }, \"Job Title\"))), /*#__PURE__*/React.createElement(TableBody, {\n        employees: this.state.employees,\n        deleteEmployee: this.deleteEmployee,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }\n      })));\n    }\n  }]);\n\n  return Table;\n}(React.Component);\n\nexport default Table;","map":{"version":3,"sources":["F:/apps/react-employee-directory/client/src/components/pages/Table/index.js"],"names":["React","TableBody","API","Button","Table","state","employees","sortedEmployees","sortOrder","getEmployeeInfo","then","res","setState","data","console","log","getEmployeeData","ascendingFirstNameSorted","sort","a","b","firstName","descendingFirstNameSorted","ascendingLastNameSorted","lastName","descendingLastNameSorted","ascendingJobTitleSorted","jobTitle","descendingJobTitleSorted","employeeId","deleteEmployee","sortByFirstName","sortByLastName","sortByJob","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport TableBody from \"../../TableBody\";\r\nimport API from \"../../../utils/API\";\r\nimport Button from \"../../Button\";\r\nimport \"./style.css\";\r\n\r\nclass Table extends React.Component {\r\n  // set the state to an array that will receive employee data from db\r\n  state = {\r\n    employees: [],\r\n    sortedEmployees: [],\r\n    sortOrder: \"ascending\",\r\n  };\r\n  // get employee data from backend db\r\n  getEmployeeData() {\r\n    API.getEmployeeInfo().then((res) => {\r\n      this.setState({ employees: res.data });\r\n      console.log(this.state.employees);\r\n    });\r\n  }\r\n  // retrieve employee data when component mounts\r\n  componentDidMount() {\r\n    this.getEmployeeData();\r\n  }\r\n\r\n  sortByFirstName() {\r\n    // sort in ascending or descending order depending on the setOrder state\r\n    if (this.state.sortOrder === \"ascending\") {\r\n      // uses array.sort method to compare state object properties\r\n      let ascendingFirstNameSorted = this.state.employees.sort((a, b) =>\r\n        a.firstName > b.firstName ? 1 : -1\r\n      );\r\n      // set the state to the new first name sorted array\r\n      this.setState({\r\n        employees: ascendingFirstNameSorted,\r\n        sortOrder: \"descending\",\r\n      });\r\n    } else if (this.state.sortOrder === \"descending\") {\r\n      // uses array.sort method to compare state object properties\r\n      let descendingFirstNameSorted = this.state.employees.sort((a, b) =>\r\n        a.firstName < b.firstName ? 1 : -1\r\n      );\r\n      this.setState({\r\n        employees: descendingFirstNameSorted,\r\n        sortOrder: \"ascending\",\r\n      });\r\n    }\r\n  }\r\n\r\n  sortByLastName() {\r\n    if (this.state.sortOrder === \"ascending\") {\r\n      let ascendingLastNameSorted = this.state.employees.sort((a, b) =>\r\n        a.lastName > b.lastName ? 1 : -1\r\n      );\r\n      this.setState({\r\n        employees: ascendingLastNameSorted,\r\n        sortOrder: \"descending\",\r\n      });\r\n    } else if (this.state.sortOrder === \"descending\") {\r\n      let descendingLastNameSorted = this.state.employees.sort((a, b) =>\r\n        a.lastName < b.lastName ? 1 : -1\r\n      );\r\n      this.setState({\r\n        employees: descendingLastNameSorted,\r\n        sortOrder: \"ascending\",\r\n      });\r\n    }\r\n  }\r\n\r\n  sortByJob() {\r\n    if (this.state.sortOrder === \"ascending\") {\r\n      let ascendingJobTitleSorted = this.state.employees.sort((a, b) =>\r\n        a.jobTitle > b.jobTitle ? 1 : -1\r\n      );\r\n      this.setState({\r\n        employees: ascendingJobTitleSorted,\r\n        sortOrder: \"descending\",\r\n      });\r\n    } else if (this.state.sortOrder === \"descending\") {\r\n      let descendingJobTitleSorted = this.state.employees.sort((a, b) =>\r\n        a.jobTitle < b.jobTitle ? 1 : -1\r\n      );\r\n      this.setState({\r\n        employees: descendingJobTitleSorted,\r\n        sortOrder: \"ascending\",\r\n      });\r\n    }\r\n  }\r\n\r\n  deleteEmployee(employeeId) {\r\n    API.deleteEmployee(employeeId).then(() => {\r\n      this.getEmployeeData();\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h3>Employees</h3>\r\n        <Button\r\n          buttonText=\"Sort\"\r\n          handleSort={() => {\r\n            this.sortByFirstName();\r\n          }}\r\n        />\r\n        <Button\r\n          buttonText=\"Sort\"\r\n          handleSort={() => {\r\n            this.sortByLastName();\r\n          }}\r\n        />\r\n        <Button\r\n          buttonText=\"Sort\"\r\n          handleSort={() => {\r\n            this.sortByJob();\r\n          }}\r\n        />\r\n        <table className=\"table table-dark table-striped table-bordered employees\">\r\n          <thead>\r\n            <tr>\r\n              <th scope=\"col\">First Name</th>\r\n              <th scope=\"col\">Last Name</th>\r\n              <th scope=\"col\">Job Title</th>\r\n            </tr>\r\n          </thead>\r\n          <TableBody\r\n            employees={this.state.employees}\r\n            deleteEmployee={this.deleteEmployee}\r\n          />\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Table;\r\n"]},"metadata":{},"sourceType":"module"}